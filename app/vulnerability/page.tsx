"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { useToast } from "@/src/hooks/use-toast"
import { 
  AlertTriangle, Shield, TrendingUp, Activity, Clock, CheckCircle, XCircle,
  AlertCircle, Search, Filter, Calendar, Target, Bug, Zap, Database,
  Network, Server, Globe, Smartphone, Lock, Eye, FileText, Settings,
  ChevronRight, BarChart3, PieChart, ArrowUp, ArrowDown, Minus, Loader2
} from "lucide-react"

interface VulnerabilityData {
  id: string
  cve: string
  title: string
  severity: "critical" | "high" | "medium" | "low"
  cvss: number
  category: "web_app" | "network" | "operating_system" | "application" | "database" | "mobile" | "iot"
  status: "new" | "acknowledged" | "in_progress" | "resolved" | "risk_accepted"
  discoveredDate: string
  dueDate?: string
  affectedAssets: string[]
  description: string
  impact: string
  remediation: string
  exploitable: boolean
  exploitAvailable: boolean
  publicExploit: boolean
  trending: boolean
  priority: "critical" | "high" | "medium" | "low"
  assignee?: string
  estimatedEffort: string
  businessImpact: "critical" | "high" | "medium" | "low"
  complianceIssue: boolean
}

interface Asset {
  id: string
  name: string
  type: "server" | "workstation" | "network_device" | "web_app" | "mobile" | "cloud"
  ip: string
  os: string
  criticality: "critical" | "high" | "medium" | "low"
  vulnerabilities: number
  lastScan: string
  patchLevel: string
  owner: string
  location: string
}

interface ScanConfig {
  id: string
  name: string
  type: "network" | "web_app" | "compliance" | "configuration"
  scope: string[]
  schedule: string
  lastRun: string
  nextRun: string
  status: "active" | "paused" | "completed" | "failed"
  findings: number
}

interface RiskMetrics {
  totalVulnerabilities: number
  criticalCount: number
  highCount: number
  mediumCount: number
  lowCount: number
  exploitableCount: number
  trendingThreats: number
  overdueRemediation: number
  meanTimeToRemediate: number
  riskScore: number
  complianceGap: number
}

export default function VulnerabilityManagementPage() {
  const { toast } = useToast()
  const [loadingStates, setLoadingStates] = useState({
    scan: "",
    fix: "",
    research: "",
    report: ""
  })
  const [scanProgress, setScanProgress] = useState(0)

  const handleVulnScan = async (assetId: string, assetName: string) => {
    setLoadingStates(prev => ({ ...prev, scan: assetId }))
    setScanProgress(0)
    
    try {
      // Simulate real vulnerability scanning progress
      for (let i = 0; i <= 100; i += 10) {
        setScanProgress(i)
        await new Promise(resolve => setTimeout(resolve, 200))
      }
      
      toast({
        title: "Vulnerability Scan Complete",
        description: `Scanned ${assetName}. Found 3 critical, 7 high, 12 medium severity vulnerabilities.`,
      })
    } catch (error) {
      toast({
        title: "Scan Failed",
        description: "Unable to complete vulnerability scan. Check network connectivity.",
        variant: "destructive",
      })
    } finally {
      setLoadingStates(prev => ({ ...prev, scan: "" }))
      setScanProgress(0)
    }
  }

  const handleFixVulnerability = async (vulnId: string, vulnTitle: string) => {
    setLoadingStates(prev => ({ ...prev, fix: vulnId }))
    
    try {
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      toast({
        title: "Remediation Applied",
        description: `${vulnTitle} has been patched and secured.`,
      })
    } catch (error) {
      toast({
        title: "Remediation Failed",
        description: "Failed to apply security patch. Manual intervention required.",
        variant: "destructive",
      })
    } finally {
      setLoadingStates(prev => ({ ...prev, fix: "" }))
    }
  }

  const handleResearchVuln = async (cve: string) => {
    setLoadingStates(prev => ({ ...prev, research: cve }))
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      toast({
        title: "Research Complete",
        description: `Gathered intelligence on ${cve}. Check threat intelligence tab for details.`,
      })
    } catch (error) {
      toast({
        title: "Research Failed",
        description: "Unable to fetch vulnerability intelligence.",
        variant: "destructive",
      })
    } finally {
      setLoadingStates(prev => ({ ...prev, research: "" }))
    }
  }

  const handleGenerateReport = async () => {
    setLoadingStates(prev => ({ ...prev, report: "generating" }))
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2500))
      
      toast({
        title: "Report Generated",
        description: "Executive vulnerability report saved to /reports/vulnerability-assessment.pdf",
      })
    } catch (error) {
      toast({
        title: "Report Generation Failed", 
        description: "Unable to generate vulnerability report.",
        variant: "destructive",
      })
    } finally {
      setLoadingStates(prev => ({ ...prev, report: "" }))
    }
  }

  const [vulnerabilities] = useState<VulnerabilityData[]>([
    {
      id: "vuln-001",
      cve: "CVE-2023-44487",
      title: "HTTP/2 Rapid Reset DDoS Vulnerability",
      severity: "critical",
      cvss: 9.8,
      category: "web_app",
      status: "in_progress",
      discoveredDate: "2025-09-01",
      dueDate: "2025-09-15",
      affectedAssets: ["web-server-01", "web-server-02", "api-gateway"],
      description: "HTTP/2 rapid reset attack can cause denial of service",
      impact: "Complete service disruption, potential financial losses",
      remediation: "Update web servers to latest version and configure rate limiting",
      exploitable: true,
      exploitAvailable: true,
      publicExploit: true,
      trending: true,
      priority: "critical",
      assignee: "John Doe",
      estimatedEffort: "16 hours",
      businessImpact: "critical",
      complianceIssue: false
    },
    {
      id: "vuln-002", 
      cve: "CVE-2023-4911",
      title: "Buffer Overflow in GNU libc's dynamic loader",
      severity: "high",
      cvss: 8.4,
      category: "operating_system",
      status: "new",
      discoveredDate: "2025-09-03",
      dueDate: "2025-09-17",
      affectedAssets: ["linux-server-01", "linux-server-02", "docker-host"],
      description: "Buffer overflow vulnerability in dynamic loader",
      impact: "Privilege escalation, arbitrary code execution",
      remediation: "Update glibc package to patched version",
      exploitable: true,
      exploitAvailable: false,
      publicExploit: false,
      trending: false,
      priority: "high",
      estimatedEffort: "8 hours",
      businessImpact: "high",
      complianceIssue: true
    },
    {
      id: "vuln-003",
      cve: "CVE-2023-36884",
      title: "Microsoft Office and Windows HTML RCE",
      severity: "high",
      cvss: 8.3,
      category: "application",
      status: "resolved",
      discoveredDate: "2025-08-15",
      affectedAssets: ["workstation-group-1"],
      description: "Remote code execution via crafted Office documents",
      impact: "Unauthorized code execution, data compromise",
      remediation: "Apply Microsoft security updates",
      exploitable: false,
      exploitAvailable: true,
      publicExploit: true,
      trending: false,
      priority: "high",
      estimatedEffort: "4 hours",
      businessImpact: "medium",
      complianceIssue: false
    }
  ])

  const [assets] = useState<Asset[]>([
    {
      id: "asset-001",
      name: "web-server-01",
      type: "server",
      ip: "10.1.1.100",
      os: "Ubuntu 20.04 LTS",
      criticality: "critical",
      vulnerabilities: 7,
      lastScan: "2025-09-06",
      patchLevel: "90%",
      owner: "DevOps Team",
      location: "Data Center A"
    },
    {
      id: "asset-002", 
      name: "api-gateway",
      type: "network_device",
      ip: "10.1.1.1",
      os: "Custom Firmware",
      criticality: "critical",
      vulnerabilities: 3,
      lastScan: "2025-09-05",
      patchLevel: "95%",
      owner: "Network Team",
      location: "Data Center A"
    },
    {
      id: "asset-003",
      name: "workstation-group-1",
      type: "workstation",
      ip: "10.2.0.0/24",
      os: "Windows 11",
      criticality: "medium",
      vulnerabilities: 12,
      lastScan: "2025-09-04",
      patchLevel: "85%",
      owner: "IT Support",
      location: "Office Building"
    }
  ])

  const [scanConfigs] = useState<ScanConfig[]>([
    {
      id: "scan-001",
      name: "Weekly Network Scan",
      type: "network",
      scope: ["10.1.0.0/16", "10.2.0.0/16"],
      schedule: "Weekly on Sunday 02:00",
      lastRun: "2025-09-01 02:00",
      nextRun: "2025-09-08 02:00", 
      status: "active",
      findings: 47
    },
    {
      id: "scan-002",
      name: "Web Application Security Scan",
      type: "web_app",
      scope: ["https://app.company.com", "https://api.company.com"],
      schedule: "Daily at 01:00",
      lastRun: "2025-09-06 01:00",
      nextRun: "2025-09-07 01:00",
      status: "active",
      findings: 12
    }
  ])

  const [riskMetrics] = useState<RiskMetrics>({
    totalVulnerabilities: 247,
    criticalCount: 15,
    highCount: 34,
    mediumCount: 89,
    lowCount: 109,
    exploitableCount: 43,
    trendingThreats: 8,
    overdueRemediation: 12,
    meanTimeToRemediate: 14.5,
    riskScore: 7.8,
    complianceGap: 23,
  })

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "destructive"
      case "high": return "destructive"
      case "medium": return "secondary"
      case "low": return "outline"
      default: return "outline"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "new": return "destructive"
      case "acknowledged": return "secondary"
      case "in_progress": return "default"
      case "resolved": return "secondary"
      case "risk_accepted": return "outline"
      default: return "outline"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "new": return <AlertCircle className="h-3 w-3" />
      case "acknowledged": return <Eye className="h-3 w-3" />
      case "in_progress": return <Clock className="h-3 w-3" />
      case "resolved": return <CheckCircle className="h-3 w-3" />
      case "risk_accepted": return <Minus className="h-3 w-3" />
      default: return <AlertCircle className="h-3 w-3" />
    }
  }

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case "critical": return <ArrowUp className="h-3 w-3 text-destructive" />
      case "high": return <ArrowUp className="h-3 w-3 text-orange-500" />
      case "medium": return <Minus className="h-3 w-3 text-yellow-500" />
      case "low": return <ArrowDown className="h-3 w-3 text-green-500" />
      default: return <Minus className="h-3 w-3" />
    }
  }

  const getAssetTypeIcon = (type: string) => {
    switch (type) {
      case "server": return <Server className="h-4 w-4" />
      case "workstation": return <Database className="h-4 w-4" />
      case "network_device": return <Network className="h-4 w-4" />
      case "web_app": return <Globe className="h-4 w-4" />
      case "mobile": return <Smartphone className="h-4 w-4" />
      case "cloud": return <Shield className="h-4 w-4" />
      default: return <Server className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-background text-foreground">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="flex h-16 items-center justify-between px-6">
          <div className="flex items-center gap-3">
            <Bug className="h-8 w-8 text-accent" />
            <div>
              <h1 className="text-xl font-bold">Vulnerability Management</h1>
              <p className="text-sm text-muted-foreground">Comprehensive vulnerability assessment and remediation tracking</p>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <Badge variant="destructive" className="text-sm">
              <AlertTriangle className="h-3 w-3 mr-1" />
              {riskMetrics.criticalCount} Critical
            </Badge>
            <Badge variant="secondary" className="text-sm">
              <Activity className="h-3 w-3 mr-1" />
              Risk Score: {riskMetrics.riskScore}
            </Badge>
          </div>
        </div>
      </header>

      <div className="p-6">
        {/* Critical Vulnerability Alerts */}
        <div className="mb-6 space-y-3">
          <Alert className="border-destructive bg-destructive/10">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>Critical HTTP/2 Vulnerability Active</AlertTitle>
            <AlertDescription>
              CVE-2023-44487 affects 3 web servers. Public exploits available. 
              Patch deployment in progress - ETA 6 hours.
            </AlertDescription>
          </Alert>

          <Alert className="border-orange-500 bg-orange-500/10">
            <Clock className="h-4 w-4" />
            <AlertTitle>12 Vulnerabilities Past Due</AlertTitle>
            <AlertDescription>
              Critical and high-severity vulnerabilities have exceeded remediation SLA. 
              Immediate attention required to maintain compliance posture.
            </AlertDescription>
          </Alert>
        </div>

        {/* Vulnerability Management Dashboard */}
        <Tabs defaultValue="dashboard" className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="assets">Assets</TabsTrigger>
            <TabsTrigger value="scans">Scans</TabsTrigger>
            <TabsTrigger value="reports">Reports</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard" className="space-y-6">
            {/* Key Risk Metrics */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
                  <Bug className="h-4 w-4 text-chart-1" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{riskMetrics.totalVulnerabilities}</div>
                  <p className="text-xs text-muted-foreground">+12 this week</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Critical Risk</CardTitle>
                  <AlertTriangle className="h-4 w-4 text-destructive" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-destructive">{riskMetrics.criticalCount}</div>
                  <p className="text-xs text-muted-foreground">{riskMetrics.exploitableCount} exploitable</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Risk Score</CardTitle>
                  <TrendingUp className="h-4 w-4 text-chart-2" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{riskMetrics.riskScore}/10</div>
                  <p className="text-xs text-muted-foreground">Trending up</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">MTTR</CardTitle>
                  <Clock className="h-4 w-4 text-chart-4" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{riskMetrics.meanTimeToRemediate}d</div>
                  <p className="text-xs text-muted-foreground">Mean time to remediate</p>
                </CardContent>
              </Card>
            </div>

            {/* Vulnerability Breakdown */}
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="h-5 w-5" />
                    Vulnerability Distribution
                  </CardTitle>
                  <CardDescription>Breakdown by severity level</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-destructive rounded-full"></div>
                        <span className="text-sm">Critical</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-mono">{riskMetrics.criticalCount}</span>
                        <div className="w-20 bg-secondary rounded-full h-2">
                          <div 
                            className="bg-destructive h-2 rounded-full" 
                            style={{ width: `${(riskMetrics.criticalCount / riskMetrics.totalVulnerabilities) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                        <span className="text-sm">High</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-mono">{riskMetrics.highCount}</span>
                        <div className="w-20 bg-secondary rounded-full h-2">
                          <div 
                            className="bg-orange-500 h-2 rounded-full" 
                            style={{ width: `${(riskMetrics.highCount / riskMetrics.totalVulnerabilities) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                        <span className="text-sm">Medium</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-mono">{riskMetrics.mediumCount}</span>
                        <div className="w-20 bg-secondary rounded-full h-2">
                          <div 
                            className="bg-yellow-500 h-2 rounded-full" 
                            style={{ width: `${(riskMetrics.mediumCount / riskMetrics.totalVulnerabilities) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                        <span className="text-sm">Low</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-mono">{riskMetrics.lowCount}</span>
                        <div className="w-20 bg-secondary rounded-full h-2">
                          <div 
                            className="bg-green-500 h-2 rounded-full" 
                            style={{ width: `${(riskMetrics.lowCount / riskMetrics.totalVulnerabilities) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="h-5 w-5" />
                    Remediation Progress
                  </CardTitle>
                  <CardDescription>Vulnerability remediation status tracking</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Critical Remediation</span>
                        <span>73%</span>
                      </div>
                      <Progress value={73} className="h-2" />
                    </div>

                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>High Priority</span>
                        <span>56%</span>
                      </div>
                      <Progress value={56} className="h-2" />
                    </div>

                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Medium Priority</span>
                        <span>82%</span>
                      </div>
                      <Progress value={82} className="h-2" />
                    </div>

                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Overall Compliance</span>
                        <span>77%</span>
                      </div>
                      <Progress value={77} className="h-2" />
                    </div>
                  </div>

                  <Alert className="border-secondary bg-secondary/10">
                    <CheckCircle className="h-4 w-4" />
                    <AlertTitle>Remediation Target</AlertTitle>
                    <AlertDescription>
                      On track to achieve 90% critical vulnerability remediation by month-end.
                    </AlertDescription>
                  </Alert>
                </CardContent>
              </Card>
            </div>

            {/* Top Critical Vulnerabilities */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5" />
                  Critical Vulnerabilities Requiring Immediate Action
                </CardTitle>
                <CardDescription>High-impact vulnerabilities with active threats</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {vulnerabilities.filter(v => v.severity === "critical").map((vuln) => (
                  <div key={vuln.id} className="rounded-lg border border-destructive/20 p-4 bg-destructive/5">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        {getPriorityIcon(vuln.priority)}
                        <div>
                          <p className="font-medium">{vuln.title}</p>
                          <p className="text-sm text-muted-foreground">
                            {vuln.cve} • CVSS {vuln.cvss} • {vuln.affectedAssets.length} assets affected
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant={getStatusColor(vuln.status)}>
                          {getStatusIcon(vuln.status)}
                          {vuln.status.replace("_", " ").toUpperCase()}
                        </Badge>
                        {vuln.trending && <Badge variant="outline">TRENDING</Badge>}
                        {vuln.publicExploit && <Badge variant="destructive">PUBLIC EXPLOIT</Badge>}
                      </div>
                    </div>

                    <div className="grid gap-3 md:grid-cols-2 mb-3">
                      <div>
                        <p className="text-sm font-medium">Business Impact:</p>
                        <p className="text-sm text-destructive">{vuln.impact}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium">Remediation:</p>
                        <p className="text-sm">{vuln.remediation}</p>
                      </div>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4 text-sm">
                        <span>Due: {vuln.dueDate ? new Date(vuln.dueDate).toLocaleDateString() : "Not set"}</span>
                        <span>Effort: {vuln.estimatedEffort}</span>
                        {vuln.assignee && <span>Assigned: {vuln.assignee}</span>}
                      </div>
                      <div className="flex gap-2">
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => {
                            toast({
                              title: "Vulnerability Details",
                              description: `Opening detailed analysis for ${vuln.cve}: ${vuln.title}`,
                            })
                          }}
                        >
                          <Eye className="h-3 w-3 mr-1" />
                          Details
                        </Button>
                        <Button 
                          size="sm" 
                          variant="destructive"
                          onClick={() => handleFixVulnerability(vuln.id, vuln.title)}
                          disabled={loadingStates.fix === vuln.id}
                        >
                          {loadingStates.fix === vuln.id ? (
                            <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                          ) : (
                            <Zap className="h-3 w-3 mr-1" />
                          )}
                          Fix Now
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="vulnerabilities" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bug className="h-5 w-5" />
                  Vulnerability Database
                </CardTitle>
                <CardDescription>Complete vulnerability inventory and tracking</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-4 mb-4">
                  <Input placeholder="Search CVE, title, or asset..." className="max-w-sm" />
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="new">New</SelectItem>
                      <SelectItem value="in_progress">In Progress</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline">
                    <Filter className="h-4 w-4 mr-2" />
                    More Filters
                  </Button>
                </div>

                {vulnerabilities.map((vuln) => (
                  <div key={vuln.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        {getPriorityIcon(vuln.priority)}
                        <div>
                          <p className="font-medium">{vuln.title}</p>
                          <p className="text-sm text-muted-foreground">
                            {vuln.cve} • Discovered: {new Date(vuln.discoveredDate).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-mono">CVSS {vuln.cvss}</span>
                        <Badge variant={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant={getStatusColor(vuln.status)}>
                          {getStatusIcon(vuln.status)}
                          {vuln.status.replace("_", " ").toUpperCase()}
                        </Badge>
                      </div>
                    </div>

                    <div className="flex gap-1 flex-wrap mb-3">
                      {vuln.exploitable && <Badge variant="destructive" className="text-xs">EXPLOITABLE</Badge>}
                      {vuln.publicExploit && <Badge variant="destructive" className="text-xs">PUBLIC EXPLOIT</Badge>}
                      {vuln.trending && <Badge variant="secondary" className="text-xs">TRENDING</Badge>}
                      {vuln.complianceIssue && <Badge variant="outline" className="text-xs">COMPLIANCE</Badge>}
                    </div>

                    <div className="space-y-2 mb-3">
                      <p className="text-sm">
                        <span className="font-medium">Affected Assets: </span>
                        {vuln.affectedAssets.join(", ")}
                      </p>
                      <p className="text-sm text-muted-foreground">{vuln.description}</p>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="text-sm text-muted-foreground">
                        Category: {vuln.category.replace("_", " ").toUpperCase()} • 
                        Effort: {vuln.estimatedEffort} •
                        Business Impact: {vuln.businessImpact.toUpperCase()}
                      </div>
                      <div className="flex gap-2">
                        <Button size="sm" variant="outline">
                          <Eye className="h-3 w-3 mr-1" />
                          View
                        </Button>
                        <Button size="sm" variant="outline">
                          <FileText className="h-3 w-3 mr-1" />
                          Report
                        </Button>
                        {vuln.status !== "resolved" && (
                          <Button size="sm" variant="outline">
                            <CheckCircle className="h-3 w-3 mr-1" />
                            Resolve
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="assets" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5" />
                  Asset Inventory
                </CardTitle>
                <CardDescription>IT assets and their vulnerability status</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {assets.map((asset) => (
                  <div key={asset.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        {getAssetTypeIcon(asset.type)}
                        <div>
                          <p className="font-medium">{asset.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {asset.ip} • {asset.os}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={getSeverityColor(asset.criticality)}>
                          {asset.criticality.toUpperCase()}
                        </Badge>
                        <span className="text-sm font-mono">{asset.vulnerabilities} vulns</span>
                      </div>
                    </div>

                    <div className="grid gap-3 md:grid-cols-4 text-sm mb-3">
                      <div>
                        <p className="text-muted-foreground">Owner</p>
                        <p>{asset.owner}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Location</p>
                        <p>{asset.location}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Last Scan</p>
                        <p>{new Date(asset.lastScan).toLocaleDateString()}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Patch Level</p>
                        <p>{asset.patchLevel}</p>
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleVulnScan(asset.id, asset.name)}
                        disabled={loadingStates.scan === asset.id}
                      >
                        {loadingStates.scan === asset.id ? (
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <Search className="h-3 w-3 mr-1" />
                        )}
                        Scan Now
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => {
                          toast({
                            title: "Asset Details",
                            description: `Viewing detailed information for ${asset.name} (${asset.ip})`,
                          })
                        }}
                      >
                        <Eye className="h-3 w-3 mr-1" />
                        View Details
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleGenerateReport()}
                        disabled={loadingStates.report === "generating"}
                      >
                        {loadingStates.report === "generating" ? (
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <FileText className="h-3 w-3 mr-1" />
                        )}
                        Report
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="scans" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Search className="h-5 w-5" />
                  Vulnerability Scans
                </CardTitle>
                <CardDescription>Automated vulnerability scanning configuration and results</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-4 mb-4">
                  <Button 
                    onClick={() => {
                      toast({
                        title: "New Scan Initiated",
                        description: "Starting comprehensive vulnerability scan across all network assets...",
                      })
                      // Start a network-wide scan
                      setTimeout(() => {
                        toast({
                          title: "Network Scan Complete",
                          description: "Found 47 vulnerabilities across 23 assets. Check dashboard for details.",
                        })
                      }, 4000)
                    }}
                  >
                    <Search className="h-4 w-4 mr-2" />
                    New Scan
                  </Button>
                  <Button 
                    variant="outline"
                    onClick={() => {
                      toast({
                        title: "Scan Scheduler",
                        description: "Opening automated scan scheduler. Configure recurring vulnerability assessments.",
                      })
                    }}
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Schedule
                  </Button>
                  <Button 
                    variant="outline"
                    onClick={() => {
                      toast({
                        title: "Scan Templates",
                        description: "Opening scan template library. Use predefined configurations for common scan types.",
                      })
                    }}
                  >
                    <Settings className="h-4 w-4 mr-2" />
                    Templates
                  </Button>
                </div>

                {scanConfigs.map((scan) => (
                  <div key={scan.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium">{scan.name}</p>
                        <p className="text-sm text-muted-foreground capitalize">
                          {scan.type.replace("_", " ")} scan
                        </p>
                      </div>
                      <Badge variant={getStatusColor(scan.status)}>
                        {scan.status.toUpperCase()}
                      </Badge>
                    </div>

                    <div className="space-y-2 mb-3">
                      <div>
                        <p className="text-sm font-medium">Scope:</p>
                        <div className="flex gap-1 flex-wrap">
                          {scan.scope.map((item, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {item}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>

                    <div className="grid gap-3 md:grid-cols-3 text-sm mb-3">
                      <div>
                        <p className="text-muted-foreground">Schedule</p>
                        <p>{scan.schedule}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Last Run</p>
                        <p>{scan.lastRun}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Findings</p>
                        <p className="font-mono">{scan.findings}</p>
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button size="sm" variant="outline">
                        <Search className="h-3 w-3 mr-1" />
                        Run Now
                      </Button>
                      <Button size="sm" variant="outline">
                        <Settings className="h-3 w-3 mr-1" />
                        Configure
                      </Button>
                      <Button size="sm" variant="outline">
                        <FileText className="h-3 w-3 mr-1" />
                        Results
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reports" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Vulnerability Reports
                  </CardTitle>
                  <CardDescription>Generate comprehensive vulnerability assessments</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button className="w-full justify-start">
                    <FileText className="h-4 w-4 mr-2" />
                    Executive Risk Summary
                  </Button>
                  <Button className="w-full justify-start" variant="outline">
                    <Bug className="h-4 w-4 mr-2" />
                    Technical Vulnerability Report  
                  </Button>
                  <Button className="w-full justify-start" variant="outline">
                    <Shield className="h-4 w-4 mr-2" />
                    Compliance Assessment
                  </Button>
                  <Button className="w-full justify-start" variant="outline">
                    <Target className="h-4 w-4 mr-2" />
                    Asset Risk Profile
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="h-5 w-5" />
                    Key Metrics
                  </CardTitle>
                  <CardDescription>Vulnerability management performance indicators</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-3 text-sm">
                    <div className="flex justify-between">
                      <span>Vulnerability Discovery Rate</span>
                      <span className="font-mono">12/week</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Critical Remediation Rate</span>
                      <span className="font-mono">73%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Mean Time to Patch</span>
                      <span className="font-mono">{riskMetrics.meanTimeToRemediate} days</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Security Debt</span>
                      <span className="font-mono">$127k</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  Vulnerability Management Settings
                </CardTitle>
                <CardDescription>Configure scanning, notifications, and workflows</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <h3 className="text-lg font-medium">Risk Scoring</h3>
                    <div className="space-y-3 mt-2">
                      <div className="flex items-center justify-between">
                        <label className="text-sm">Enable dynamic risk scoring</label>
                        <Switch defaultChecked />
                      </div>
                      <div className="flex items-center justify-between">
                        <label className="text-sm">Include threat intelligence feeds</label>
                        <Switch defaultChecked />
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium">Remediation SLA</h3>
                    <div className="space-y-3 mt-2">
                      <div className="flex items-center justify-between">
                        <label className="text-sm">Critical vulnerabilities</label>
                        <Select>
                          <SelectTrigger className="w-32">
                            <SelectValue placeholder="7 days" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="1">1 day</SelectItem>
                            <SelectItem value="3">3 days</SelectItem>
                            <SelectItem value="7">7 days</SelectItem>
                            <SelectItem value="14">14 days</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="flex items-center justify-between">
                        <label className="text-sm">High severity vulnerabilities</label>
                        <Select>
                          <SelectTrigger className="w-32">
                            <SelectValue placeholder="30 days" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="7">7 days</SelectItem>
                            <SelectItem value="14">14 days</SelectItem>
                            <SelectItem value="30">30 days</SelectItem>
                            <SelectItem value="60">60 days</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium">Notifications</h3>
                    <div className="space-y-3 mt-2">
                      <div className="flex items-center justify-between">
                        <label className="text-sm">Email alerts for critical vulnerabilities</label>
                        <Switch defaultChecked />
                      </div>
                      <div className="flex items-center justify-between">
                        <label className="text-sm">Slack integration</label>
                        <Switch />
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
