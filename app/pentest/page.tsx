"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { 
  Target, Sword, Shield, Eye, Activity, TrendingUp, Clock, AlertTriangle,
  Play, Pause, Square, Settings, FileText, Code, Terminal, Database,
  Network, Lock, Users, Search, Zap, Brain, Map, CheckCircle, XCircle
} from "lucide-react"

interface PentestCampaign {
  id: string
  name: string
  type: "red_team" | "purple_team" | "pen_test" | "bug_bounty"
  status: "planning" | "active" | "completed" | "paused"
  scope: string[]
  startDate: string
  endDate?: string
  progress: number
  findings: number
  criticalVulns: number
  team: string[]
}

interface Vulnerability {
  id: string
  title: string
  severity: "critical" | "high" | "medium" | "low" | "info"
  cvss: number
  category: "web_app" | "network" | "system" | "social" | "physical"
  status: "open" | "fixed" | "mitigated" | "accepted"
  asset: string
  discoveredDate: string
  description: string
  impact: string
  remediation: string
}

interface ExploitModule {
  id: string
  name: string
  type: "exploit" | "payload" | "auxiliary" | "post"
  platform: "windows" | "linux" | "web" | "mobile" | "multi"
  reliability: "excellent" | "great" | "good" | "average" | "poor"
  rank: "excellent" | "great" | "good" | "normal" | "low"
  targets: string[]
  lastUsed?: string
}

interface RedTeamOperation {
  id: string
  name: string
  objective: string
  phase: "recon" | "initial_access" | "persistence" | "privilege_escalation" | "lateral_movement" | "exfiltration"
  ttps: string[]
  compromisedAssets: number
  duration: string
  stealth: "high" | "medium" | "low"
  detectionEvents: number
}

interface AttackPath {
  id: string
  name: string
  startPoint: string
  target: string
  steps: string[]
  difficulty: "easy" | "medium" | "hard" | "expert"
  likelihood: number
  impact: number
  mitigation: string[]
}

export default function PenetrationTestingPage() {
  const [campaigns] = useState<PentestCampaign[]>([
    {
      id: "camp-001",
      name: "Q4 Red Team Assessment",
      type: "red_team",
      status: "active",
      scope: ["External Network", "Internal Network", "Web Applications"],
      startDate: "2025-09-01",
      progress: 65,
      findings: 47,
      criticalVulns: 7,
      team: ["Alice Johnson", "Bob Smith", "Charlie Brown"]
    },
    {
      id: "camp-002",
      name: "Web Application Security Audit",
      type: "pen_test",
      status: "active",
      scope: ["Customer Portal", "Admin Dashboard", "API Endpoints"],
      startDate: "2025-09-05",
      progress: 30,
      findings: 23,
      criticalVulns: 3,
      team: ["Dave Wilson", "Eva Martinez"]
    },
    {
      id: "camp-003",
      name: "Purple Team Exercise",
      type: "purple_team", 
      status: "completed",
      scope: ["SOC Testing", "Detection Engineering", "Response Validation"],
      startDate: "2025-08-15",
      endDate: "2025-08-30",
      progress: 100,
      findings: 156,
      criticalVulns: 12,
      team: ["Frank Davis", "Grace Lee", "Henry Chen"]
    }
  ])

  const [vulnerabilities] = useState<Vulnerability[]>([
    {
      id: "vuln-001",
      title: "SQL Injection in User Authentication",
      severity: "critical",
      cvss: 9.8,
      category: "web_app",
      status: "open",
      asset: "customer-portal.company.com",
      discoveredDate: "2025-09-06",
      description: "Authentication bypass via SQL injection in login form",
      impact: "Complete database compromise, user data exposure",
      remediation: "Implement parameterized queries and input validation"
    },
    {
      id: "vuln-002",
      title: "Privilege Escalation via Service Misconfiguration", 
      severity: "high",
      cvss: 8.4,
      category: "system",
      status: "open",
      asset: "WEB-SRV-01",
      discoveredDate: "2025-09-05",
      description: "Service running with SYSTEM privileges allows local privilege escalation",
      impact: "Full administrative access to system",
      remediation: "Configure service to run with minimal required privileges"
    },
    {
      id: "vuln-003",
      title: "Weak Password Policy Implementation",
      severity: "medium",
      cvss: 6.1,
      category: "system",
      status: "mitigated",
      asset: "Domain Controller",
      discoveredDate: "2025-09-03",
      description: "Password policy allows weak passwords and lacks complexity requirements",
      impact: "Increased risk of password-based attacks",
      remediation: "Enforce strong password policy with complexity requirements"
    }
  ])

  const [exploitModules] = useState<ExploitModule[]>([
    {
      id: "exp-001",
      name: "MS17-010 EternalBlue SMB Exploit",
      type: "exploit",
      platform: "windows",
      reliability: "excellent",
      rank: "great",
      targets: ["Windows 7", "Windows Server 2008", "Windows Server 2012"],
      lastUsed: "2025-09-05"
    },
    {
      id: "exp-002",
      name: "Apache Struts2 RCE Exploit",
      type: "exploit", 
      platform: "web",
      reliability: "great",
      rank: "excellent",
      targets: ["Apache Struts 2.3.x", "Apache Struts 2.5.x"],
      lastUsed: "2025-09-04"
    },
    {
      id: "exp-003",
      name: "Meterpreter Reverse TCP Payload",
      type: "payload",
      platform: "multi",
      reliability: "excellent",
      rank: "excellent",
      targets: ["Windows", "Linux", "macOS"],
      lastUsed: "2025-09-06"
    }
  ])

  const [redTeamOps] = useState<RedTeamOperation[]>([
    {
      id: "op-001",
      name: "Operation Shadow Strike",
      objective: "Test detection capabilities against APT-style attack",
      phase: "lateral_movement",
      ttps: ["T1566.001", "T1055", "T1083", "T1071.001"],
      compromisedAssets: 12,
      duration: "5 days",
      stealth: "high",
      detectionEvents: 3
    },
    {
      id: "op-002",
      name: "Social Engineering Campaign",
      objective: "Assess human element security awareness",
      phase: "initial_access",
      ttps: ["T1566.002", "T1204.002", "T1059.001"],
      compromisedAssets: 7,
      duration: "2 days",
      stealth: "medium",
      detectionEvents: 1
    }
  ])

  const [attackPaths] = useState<AttackPath[]>([
    {
      id: "path-001",
      name: "External to Domain Admin",
      startPoint: "Internet",
      target: "Domain Controller",
      steps: [
        "Phishing attack against employees",
        "Initial foothold via malicious attachment",
        "Privilege escalation using local exploits",
        "Lateral movement to file server",
        "Credential harvesting",
        "Access domain controller"
      ],
      difficulty: "medium",
      likelihood: 75,
      impact: 95,
      mitigation: ["Email security", "Endpoint protection", "Privilege management", "Network segmentation"]
    }
  ])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "destructive"
      case "high": return "destructive"
      case "medium": return "secondary" 
      case "low": return "outline"
      case "info": return "outline"
      default: return "outline"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active": return "secondary"
      case "planning": return "outline"
      case "completed": return "default"
      case "paused": return "outline"
      case "open": return "destructive"
      case "fixed": return "default"
      case "mitigated": return "secondary"
      case "accepted": return "outline"
      default: return "outline"
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "red_team": return <Sword className="h-4 w-4" />
      case "purple_team": return <Target className="h-4 w-4" />
      case "pen_test": return <Search className="h-4 w-4" />
      case "bug_bounty": return <Eye className="h-4 w-4" />
      default: return <Shield className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-background text-foreground">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="flex h-16 items-center justify-between px-6">
          <div className="flex items-center gap-3">
            <Sword className="h-8 w-8 text-accent" />
            <div>
              <h1 className="text-xl font-bold">Penetration Testing & Red Team</h1>
              <p className="text-sm text-muted-foreground">Offensive Security Operations & Vulnerability Assessment</p>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <Badge variant="secondary" className="text-sm">
              <Activity className="h-3 w-3 mr-1" />
              2 Active Campaigns
            </Badge>
            <Badge variant="destructive" className="text-sm">
              <AlertTriangle className="h-3 w-3 mr-1" />
              10 Critical Vulns
            </Badge>
          </div>
        </div>
      </header>

      <div className="p-6">
        {/* Critical Vulnerability Alerts */}
        <div className="mb-6 space-y-3">
          <Alert className="border-destructive bg-destructive/10">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>Critical SQL Injection Discovered</AlertTitle>
            <AlertDescription>
              Authentication bypass vulnerability found in customer portal. CVSS 9.8.
              Immediate remediation required - complete database compromise possible.
            </AlertDescription>
          </Alert>

          <Alert className="border-secondary bg-secondary/10">
            <Target className="h-4 w-4" />
            <AlertTitle>Red Team Operation Active</AlertTitle>
            <AlertDescription>
              Operation Shadow Strike in progress. 12 assets compromised, lateral movement phase.
              SOC detection rate: 25% - Testing stealth capabilities.
            </AlertDescription>
          </Alert>
        </div>

        {/* Penetration Testing Dashboard */}
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-7">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="campaigns">Campaigns</TabsTrigger>
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="exploits">Exploits</TabsTrigger>
            <TabsTrigger value="redteam">Red Team</TabsTrigger>
            <TabsTrigger value="pathways">Attack Paths</TabsTrigger>
            <TabsTrigger value="reporting">Reporting</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            {/* Key Metrics */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Active Campaigns</CardTitle>
                  <Target className="h-4 w-4 text-chart-1" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">2</div>
                  <p className="text-xs text-muted-foreground">Red team & pen testing</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Vulnerabilities</CardTitle>
                  <AlertTriangle className="h-4 w-4 text-destructive" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">47</div>
                  <p className="text-xs text-muted-foreground">10 critical findings</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Exploits Available</CardTitle>
                  <Sword className="h-4 w-4 text-chart-2" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">1,247</div>
                  <p className="text-xs text-muted-foreground">Verified modules</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
                  <TrendingUp className="h-4 w-4 text-chart-4" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">87%</div>
                  <p className="text-xs text-muted-foreground">Compromise rate</p>
                </CardContent>
              </Card>
            </div>

            {/* Active Campaigns Dashboard */}
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Activity className="h-5 w-5" />
                    Active Campaigns
                  </CardTitle>
                  <CardDescription>Currently running security assessments</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {campaigns.filter(c => c.status === "active").map((campaign) => (
                    <div key={campaign.id} className="rounded-lg border p-3">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {getTypeIcon(campaign.type)}
                          <div>
                            <p className="text-sm font-medium">{campaign.name}</p>
                            <p className="text-xs text-muted-foreground capitalize">
                              {campaign.type.replace("_", " ")} • {campaign.team.length} members
                            </p>
                          </div>
                        </div>
                        <Badge variant={getStatusColor(campaign.status)}>
                          {campaign.status.toUpperCase()}
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Progress</span>
                          <span>{campaign.progress}%</span>
                        </div>
                        <Progress value={campaign.progress} className="h-2" />
                      </div>

                      <div className="grid grid-cols-2 gap-2 mt-2 text-sm">
                        <div>
                          <span className="text-muted-foreground">Findings: </span>
                          <span className="font-mono">{campaign.findings}</span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Critical: </span>
                          <span className="font-mono text-destructive">{campaign.criticalVulns}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                  <Button className="w-full" variant="outline">
                    <Play className="h-4 w-4 mr-2" />
                    New Campaign
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlertTriangle className="h-5 w-5" />
                    Critical Vulnerabilities
                  </CardTitle>
                  <CardDescription>High-priority security issues requiring immediate attention</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {vulnerabilities.filter(v => v.severity === "critical" || v.severity === "high").slice(0, 3).map((vuln) => (
                    <div key={vuln.id} className="rounded-lg border p-3">
                      <div className="flex items-center justify-between mb-2">
                        <div>
                          <p className="text-sm font-medium">{vuln.title}</p>
                          <p className="text-xs text-muted-foreground">
                            {vuln.asset} • CVSS {vuln.cvss}
                          </p>
                        </div>
                        <div className="text-right">
                          <Badge variant={getSeverityColor(vuln.severity)}>
                            {vuln.severity.toUpperCase()}
                          </Badge>
                          <Badge variant={getStatusColor(vuln.status)} className="ml-1">
                            {vuln.status.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                      <p className="text-xs text-muted-foreground mb-2">
                        {vuln.description}
                      </p>
                      <div className="text-xs">
                        <span className="text-muted-foreground">Impact: </span>
                        <span>{vuln.impact}</span>
                      </div>
                    </div>
                  ))}
                  <Button className="w-full" variant="outline">
                    <Eye className="h-4 w-4 mr-2" />
                    View All Vulnerabilities
                  </Button>
                </CardContent>
              </Card>
            </div>

            {/* Testing Performance */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5" />
                  Penetration Testing Performance
                </CardTitle>
                <CardDescription>Assessment effectiveness and coverage metrics</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid gap-4 md:grid-cols-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Coverage Rate</span>
                      <span className="text-chart-1">94%</span>
                    </div>
                    <Progress value={94} className="h-2" />
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Exploit Success</span>
                      <span className="text-chart-2">87%</span>
                    </div>
                    <Progress value={87} className="h-2" />
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Detection Rate</span>
                      <span className="text-destructive">25%</span>
                    </div>
                    <Progress value={25} className="h-2" />
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Remediation Rate</span>
                      <span className="text-chart-4">76%</span>
                    </div>
                    <Progress value={76} className="h-2" />
                  </div>
                </div>

                <Alert className="border-chart-2 bg-chart-2/10">
                  <Sword className="h-4 w-4" />
                  <AlertTitle>Offensive Operations Active</AlertTitle>
                  <AlertDescription>
                    2 active campaigns in progress. 47 vulnerabilities discovered with 87% exploitation success rate.
                    Current focus: Testing detection capabilities and incident response procedures.
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="campaigns" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="h-5 w-5" />
                  Security Assessment Campaigns
                </CardTitle>
                <CardDescription>Manage and monitor penetration testing and red team operations</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-4 mb-4">
                  <Button>
                    <Play className="h-4 w-4 mr-2" />
                    New Campaign
                  </Button>
                  <Button variant="outline">
                    <Settings className="h-4 w-4 mr-2" />
                    Templates
                  </Button>
                  <Button variant="outline">
                    <FileText className="h-4 w-4 mr-2" />
                    Reports
                  </Button>
                </div>

                {campaigns.map((campaign) => (
                  <div key={campaign.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        {getTypeIcon(campaign.type)}
                        <div>
                          <p className="font-medium">{campaign.name}</p>
                          <p className="text-sm text-muted-foreground capitalize">
                            {campaign.type.replace("_", " ")} • Team: {campaign.team.join(", ")}
                          </p>
                        </div>
                      </div>
                      <Badge variant={getStatusColor(campaign.status)}>
                        {campaign.status.toUpperCase()}
                      </Badge>
                    </div>

                    <div className="space-y-3">
                      <div>
                        <p className="text-sm font-medium mb-1">Scope:</p>
                        <div className="flex gap-1 flex-wrap">
                          {campaign.scope.map((item) => (
                            <Badge key={item} variant="outline" className="text-xs">
                              {item}
                            </Badge>
                          ))}
                        </div>
                      </div>

                      {campaign.status === "active" && (
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span>Progress</span>
                            <span>{campaign.progress}%</span>
                          </div>
                          <Progress value={campaign.progress} className="h-2" />
                        </div>
                      )}

                      <div className="grid gap-3 md:grid-cols-3 text-sm">
                        <div>
                          <p className="text-muted-foreground">Started</p>
                          <p>{new Date(campaign.startDate).toLocaleDateString()}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Findings</p>
                          <p className="font-mono">{campaign.findings}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Critical</p>
                          <p className="font-mono text-destructive">{campaign.criticalVulns}</p>
                        </div>
                      </div>
                    </div>

                    <div className="flex gap-2 mt-4">
                      <Button size="sm" variant="outline">
                        <Eye className="h-3 w-3 mr-1" />
                        View Details
                      </Button>
                      <Button size="sm" variant="outline">
                        <FileText className="h-3 w-3 mr-1" />
                        Report
                      </Button>
                      {campaign.status === "active" && (
                        <Button size="sm" variant="outline">
                          <Pause className="h-3 w-3 mr-1" />
                          Pause
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="vulnerabilities" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5" />
                  Vulnerability Database
                </CardTitle>
                <CardDescription>Discovered security vulnerabilities and remediation tracking</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-4 mb-4">
                  <Input placeholder="Search vulnerabilities..." className="max-w-sm" />
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {vulnerabilities.map((vuln) => (
                  <div key={vuln.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium">{vuln.title}</p>
                        <p className="text-sm text-muted-foreground">
                          {vuln.asset} • Discovered: {new Date(vuln.discoveredDate).toLocaleDateString()}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant={getStatusColor(vuln.status)}>
                          {vuln.status.toUpperCase()}
                        </Badge>
                        <span className="text-sm font-mono">CVSS {vuln.cvss}</span>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <div>
                        <p className="text-sm font-medium">Description:</p>
                        <p className="text-sm text-muted-foreground">{vuln.description}</p>
                      </div>

                      <div>
                        <p className="text-sm font-medium">Business Impact:</p>
                        <p className="text-sm text-destructive">{vuln.impact}</p>
                      </div>

                      <div>
                        <p className="text-sm font-medium">Remediation:</p>
                        <p className="text-sm">{vuln.remediation}</p>
                      </div>
                    </div>

                    <div className="flex gap-2 mt-4">
                      <Button size="sm" variant="outline">
                        <Code className="h-3 w-3 mr-1" />
                        PoC
                      </Button>
                      <Button size="sm" variant="outline">
                        <FileText className="h-3 w-3 mr-1" />
                        Details
                      </Button>
                      {vuln.status === "open" && (
                        <Button size="sm" variant="outline">
                          <CheckCircle className="h-3 w-3 mr-1" />
                          Mark Fixed
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="exploits" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sword className="h-5 w-5" />
                  Exploit Framework
                </CardTitle>
                <CardDescription>Available exploit modules and payload generators</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-4 mb-4">
                  <Input placeholder="Search exploits..." className="max-w-sm" />
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Types</SelectItem>
                      <SelectItem value="exploit">Exploits</SelectItem>
                      <SelectItem value="payload">Payloads</SelectItem>
                      <SelectItem value="auxiliary">Auxiliary</SelectItem>
                      <SelectItem value="post">Post-Exploitation</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline">
                    <Terminal className="h-4 w-4 mr-2" />
                    Console
                  </Button>
                </div>

                {exploitModules.map((module) => (
                  <div key={module.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium">{module.name}</p>
                        <p className="text-sm text-muted-foreground capitalize">
                          {module.type} • {module.platform}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="capitalize">
                          {module.reliability}
                        </Badge>
                        <Badge variant="secondary" className="capitalize">
                          {module.rank}
                        </Badge>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <p className="text-sm font-medium">Target Platforms:</p>
                      <div className="flex gap-1 flex-wrap">
                        {module.targets.map((target) => (
                          <Badge key={target} variant="outline" className="text-xs">
                            {target}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    {module.lastUsed && (
                      <p className="text-xs text-muted-foreground mt-2">
                        Last used: {new Date(module.lastUsed).toLocaleDateString()}
                      </p>
                    )}

                    <div className="flex gap-2 mt-4">
                      <Button size="sm" variant="outline">
                        <Play className="h-3 w-3 mr-1" />
                        Execute
                      </Button>
                      <Button size="sm" variant="outline">
                        <Settings className="h-3 w-3 mr-1" />
                        Configure
                      </Button>
                      <Button size="sm" variant="outline">
                        <FileText className="h-3 w-3 mr-1" />
                        Documentation
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="redteam" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sword className="h-5 w-5" />
                  Red Team Operations
                </CardTitle>
                <CardDescription>Advanced persistent threat simulation and adversary emulation</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {redTeamOps.map((op) => (
                  <div key={op.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium">{op.name}</p>
                        <p className="text-sm text-muted-foreground">{op.objective}</p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary" className="capitalize">
                          {op.phase.replace("_", " ")}
                        </Badge>
                        <Badge variant={op.stealth === "high" ? "default" : "secondary"}>
                          {op.stealth.toUpperCase()} STEALTH
                        </Badge>
                      </div>
                    </div>

                    <div className="grid gap-3 md:grid-cols-3 text-sm mb-3">
                      <div>
                        <p className="text-muted-foreground">Duration</p>
                        <p className="font-mono">{op.duration}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Compromised Assets</p>
                        <p className="font-mono text-destructive">{op.compromisedAssets}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Detection Events</p>
                        <p className="font-mono">{op.detectionEvents}</p>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <p className="text-sm font-medium">MITRE ATT&CK TTPs:</p>
                      <div className="flex gap-1 flex-wrap">
                        {op.ttps.map((ttp) => (
                          <Badge key={ttp} variant="outline" className="text-xs font-mono">
                            {ttp}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div className="flex gap-2 mt-4">
                      <Button size="sm" variant="outline">
                        <Map className="h-3 w-3 mr-1" />
                        Kill Chain
                      </Button>
                      <Button size="sm" variant="outline">
                        <Activity className="h-3 w-3 mr-1" />
                        Timeline
                      </Button>
                      <Button size="sm" variant="outline">
                        <FileText className="h-3 w-3 mr-1" />
                        Report
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="pathways" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Map className="h-5 w-5" />
                  Attack Path Analysis
                </CardTitle>
                <CardDescription>Potential attack vectors and security pathway assessment</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {attackPaths.map((path) => (
                  <div key={path.id} className="rounded-lg border p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <p className="font-medium">{path.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {path.startPoint} → {path.target}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="capitalize">
                          {path.difficulty}
                        </Badge>
                        <span className="text-sm">Risk: {Math.round(path.likelihood * path.impact / 100)}</span>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <div>
                        <p className="text-sm font-medium">Attack Steps:</p>
                        <ol className="text-sm text-muted-foreground list-decimal list-inside space-y-1">
                          {path.steps.map((step, index) => (
                            <li key={index}>{step}</li>
                          ))}
                        </ol>
                      </div>

                      <div className="grid gap-3 md:grid-cols-2">
                        <div className="space-y-1">
                          <p className="text-sm font-medium">Likelihood</p>
                          <Progress value={path.likelihood} className="h-2" />
                          <p className="text-xs text-muted-foreground">{path.likelihood}%</p>
                        </div>
                        <div className="space-y-1">
                          <p className="text-sm font-medium">Impact</p>
                          <Progress value={path.impact} className="h-2" />
                          <p className="text-xs text-muted-foreground">{path.impact}%</p>
                        </div>
                      </div>

                      <div>
                        <p className="text-sm font-medium">Recommended Mitigations:</p>
                        <div className="flex gap-1 flex-wrap">
                          {path.mitigation.map((mit) => (
                            <Badge key={mit} variant="secondary" className="text-xs">
                              {mit}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>

                    <div className="flex gap-2 mt-4">
                      <Button size="sm" variant="outline">
                        <Eye className="h-3 w-3 mr-1" />
                        Visualize
                      </Button>
                      <Button size="sm" variant="outline">
                        <Play className="h-3 w-3 mr-1" />
                        Simulate
                      </Button>
                      <Button size="sm" variant="outline">
                        <Shield className="h-3 w-3 mr-1" />
                        Mitigate
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reporting" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Report Generation
                  </CardTitle>
                  <CardDescription>Generate comprehensive security assessment reports</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <Button className="w-full justify-start">
                      <FileText className="h-4 w-4 mr-2" />
                      Executive Summary Report
                    </Button>
                    <Button className="w-full justify-start" variant="outline">
                      <Code className="h-4 w-4 mr-2" />
                      Technical Findings Report
                    </Button>
                    <Button className="w-full justify-start" variant="outline">
                      <Target className="h-4 w-4 mr-2" />
                      Red Team Assessment
                    </Button>
                    <Button className="w-full justify-start" variant="outline">
                      <Map className="h-4 w-4 mr-2" />
                      Attack Path Analysis
                    </Button>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="h-5 w-5" />
                    Assessment Metrics
                  </CardTitle>
                  <CardDescription>Key performance indicators and statistics</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm">Total Vulnerabilities</span>
                      <span className="font-mono">47</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Critical/High Severity</span>
                      <span className="font-mono text-destructive">15</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Successful Exploits</span>
                      <span className="font-mono">41</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Systems Compromised</span>
                      <span className="font-mono">19</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
